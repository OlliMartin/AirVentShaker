@page "/"
@using Oma.AirVentShaker.Api.Model
@using Oma.AirVentShaker.Api.Components.Components

@inject NavigationManager navigationManager
@inject GlobalState globalState

<PageTitle>Home</PageTitle>

<div class="container-fluid overflow-x-auto">
    <Grid
        @ref="grid"
        TItem="TestStep"
        Class="table table-hover table-bordered table-striped"
        DataProvider="TestStepDataProvider"
        AllowFiltering="false"
        AllowSelection="true"
        Responsive="true"
    >
        @* <GridColumn TItem="TestStep" HeaderText="Active" PropertyName="Active"> *@
        @*     @context.Active *@
        @* </GridColumn> *@

        <GridColumn TItem="TestStep" HeaderText="Frequency" PropertyName="Frequency">
            @context.Frequency
        </GridColumn>

        <GridColumn TItem="TestStep" HeaderText="Duration" PropertyName="Duration">
            @context.Duration
        </GridColumn>

        <GridColumn TItem="TestStep" HeaderText="TargetGravitationalForce" PropertyName="TargetGravitationalForce">
            @context.TargetGravitationalForce
        </GridColumn>

        <GridColumn TItem="TestStep" HeaderText="Amplitude" PropertyName="Amplitude">
            @context.Amplitude
        </GridColumn>
        
        <GridColumn TItem="TestStep">
            <TestStepButtons Item="@context"/>    
        </GridColumn>
        

        @* <GridColumn TItem="TestStep" HeaderText="Active" PropertyName="Active"> *@
        @*     @context.Active *@
        @* </GridColumn> *@
    </Grid>

    <EditForm Model="TestStepToAdd" OnValidSubmit="OnAddTestStep" FormName="AddTestStep">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group row">
            <label class="col-md-2 col-form-label">Frequency:</label>
            <div class="col-md-10">
                <InputNumber class="form-control" @bind-Value="@TestStepToAdd.Frequency"
                             min="5"
                             max="250"/>
            </div>
        </div>

        <div class="form-group row">
            <label class="col-md-2 col-form-label">Duration (in S):</label>
            <div class="col-md-10">
                <InputNumber class="form-control" @bind-Value="@TestStepToAdd.DurationInSeconds"
                             min="1" max="300"/>
            </div>
        </div>

        <div class="form-group row">
            <label class="col-md-2 col-form-label">Target G-Force:</label>
            <div class="col-md-10">
                <InputNumber class="form-control" @bind-Value="@TestStepToAdd.TargetGravitationalForce"
                             min="0" max="2"/>
            </div>
        </div>


        <button type="submit">Submit</button>
        @* <td> *@
        @*     <Button Color="ButtonColor.Primary" @onclick="OnAddTestStep"><Icon Name="IconName.Plus"/></Button> *@
        @* </td> *@
    </EditForm>

    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit">Calibrate</button>
        </div>

        <div class="col-md-12 text-right">
            <button type="submit">Submit</button>
        </div>
    </div>
</div>

@code {
    private TestStep TestStepToAdd { get; set; }= new();
    Grid<TestStep> grid = default!;

    protected override void OnInitialized()
    {
        globalState.ActiveDefinition.OnChange += (_, _) => grid.RefreshDataAsync().GetAwaiter().GetResult();
        base.OnInitialized();
    }

    private async Task<GridDataProviderResult<TestStep>> TestStepDataProvider(GridDataProviderRequest<TestStep> request)
    {
        return await Task.FromResult(request.ApplyTo(globalState.ActiveDefinition.Steps));
    }

    private void OnAddTestStep()
    {
        TestStepToAdd.Order = globalState.ActiveDefinition.Steps.Count;
        globalState.ActiveDefinition.Steps.Add(TestStepToAdd);
        
        grid.RefreshDataAsync().GetAwaiter().GetResult();

        TestStepToAdd = new();
    }
}