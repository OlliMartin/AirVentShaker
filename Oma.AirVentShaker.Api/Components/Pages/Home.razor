@page "/"
@using Oma.AirVentShaker.Api.Model

@inject NavigationManager navigationManager

<PageTitle>Home</PageTitle>

<div class="container-fluid overflow-x-auto">
    <div class="row">
        <table class="table">
            <thead>
            <tr>
                <th>Active</th>
                <th>Frequency</th>
                <th>Duration (s)</th>
                <th>Target GForce</th>
                <th>Amplitude</th>
                <th>Actions</th>
            </tr>
            </thead>
            
            <tbody>
                @foreach (TestStep step in TestSteps.OrderBy(ts => ts.Order))
                {
                    <tr>
                        <td>
                            <CheckboxInput @bind-Value="@step.Active" />
                        </td>
                        <td>@step.Frequency</td>
                        <td>@step.Duration.TotalSeconds</td>
                        <td>@step.TargetGravitationalForce</td>
                        <td>@step.Amplitude</td>
                        
                        <td>
                            <div>
                                <button type="button" @onclick="MakeCallback(step, MoveTestStepUp)">Up</button>
                                <button type="button" @onclick="MakeCallback(step, MoveTestStepDown)">Down</button>
                                <button type="button" @onclick="MakeCallback(step, RemoveTestStep)">Rem</button>
                            </div>
                        </td>
                        
                        @* <td> *@
                        @*     <button type="button" @onclick="() => OnDeletePointClick(step)">Rem</button> *@
                        @* </td> *@
                    </tr>
                }

                <tr>
                    <td/>
                    <td>
                        <InputNumber @bind-Value="@TestStepToAdd.Frequency"
                                     min="5"
                                     max="250"/>
                    </td>
                    <td>
                        <InputNumber @bind-Value="@TestStepToAdd.DurationInSeconds"
                                     min="1" max="300"/>
                    </td>
                    <td>
                        <InputNumber @bind-Value="@TestStepToAdd.TargetGravitationalForce"
                                     min="0" max="2"/>
                    </td>
                    <td />
                    <td>
                        <button type="button" @onclick="OnAddTestStep">Add</button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit">Calibrate</button>
        </div>

        <div class="col-md-12 text-right">
            <button type="submit">Submit</button>
        </div>
    </div>
</div>

@code {
    private List<TestStep> TestSteps = [];
    private TestStep TestStepToAdd { get; set; }= new();
    
    protected override void OnInitialized()
    {
        base.OnInitialized();

        TestSteps.Add(
            new TestStep()
            {
                Frequency = 10,
                Duration = TimeSpan.FromSeconds(5),
                TargetGravitationalForce = 0.3f,
                Order = TestSteps.Count,
            }
        );
        
        TestSteps.Add(
            new TestStep()
            {
                Frequency = 20,
                Duration = TimeSpan.FromSeconds(5),
                TargetGravitationalForce = 0.5f,
                Order = TestSteps.Count,
            }
        );
        
        TestSteps.Add(
            new TestStep()
            {
                Frequency = 30,
                Duration = TimeSpan.FromSeconds(5),
                TargetGravitationalForce = 0.8f,
                Order = TestSteps.Count,
            }
        );
        
        TestSteps.Add(
            new TestStep()
            {
                Frequency = 50,
                Duration = TimeSpan.FromSeconds(5),
                TargetGravitationalForce = 1.2f,
                Order = TestSteps.Count,
            }
        );
    }

    private Action MakeCallback(TestStep thisTestStep, Action<TestStep> action)
    {
        return () => action(thisTestStep);
    }
    
    private void MoveTestStepUp(TestStep testStep)
    {
        if (testStep.Order == 0)
        {
            return;
        }
        
        var prevNode = TestSteps.Find(ts => ts.Order == testStep.Order - 1);

        if (prevNode is not null)
        {
            prevNode.Order = testStep.Order + 1;
        }
        
        testStep.Order -= 1;
        
        TestSteps = new(
            TestSteps.OrderBy(ts => ts.Order)
        );
    }
    
    private void MoveTestStepDown(TestStep testStep)
    {
        if (testStep.Order == 0)
        {
            return;
        }
        
        var nextNode = TestSteps.Find(ts => ts.Order == testStep.Order + 1);

        if (nextNode is not null)
        {
            nextNode.Order = testStep.Order - 1;
        }
        
        testStep.Order += 1;

        TestSteps = new(
            TestSteps.OrderBy(ts => ts.Order)
        );
    }
    
    private void RemoveTestStep(TestStep testStep)
    {
        TestSteps.Remove(testStep);
    }
    
    private void OnAddTestStep()
    {
        TestStepToAdd.Order = TestSteps.Count;
        TestSteps.Add(TestStepToAdd);
        
        TestStepToAdd = new();
    }

}